import { useState, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import OnboardingFlow from '../components/Onboarding/OnboardingFlow';
import LocationBar from '../components/home/LocationBar';
import SearchBar from '../components/common/SearchBar';
import StampCard from '../components/home/StampCard';
import SectionTitle from '../components/home/SectionTitle';
import PlaceCards from '../components/common/PlaceCards';
import FavoritesPickerSheet from '../components/favorites/FavoritesPickerSheet.jsx';
import AddCollectionModal from '../components/favorites/AddCollectionModal.jsx';
import { loadCollections, loadMapping, saveMapping, addCollection, recountCollectionCounts, savePlace } from '../lib/favoritesStorage';
import { useEffect } from 'react';
import TagPills from '../components/common/TagPills';


const Home = () => {
  const navigate = useNavigate();
  const [needsOnboarding, setNeedsOnboarding] = useState(() => {
    return !localStorage.getItem('onboarding_completed');
  });


  // 데이터 정의
  const favoriteData = [
    { id: 1, title: '어나더굿뉴스', category: '카페', tags: ['커피', '디저트'] },
    { id: 2, title: '슬로카페달팽이', category: '카페', tags: ['브런치'] },
    { id: 3, title: '모던플레이스', category: '레스토랑', tags: ['파스타', '분위기'] },
    { id: 4, title: '모던플레이스', category: '레스토랑', tags: ['파스타', '분위기'] },
  ];

  const todayData = [
    { id: 101, title: '슬로카페달팽이', category: '카페', tags: ['브런치'] },
    { id: 102, title: '모던플레이스', category: '레스토랑', tags: ['파스타'] },
    { id: 103, title: '브루클린카페', category: '카페', tags: ['분위기'] }
  ];

  const handleOnboardingComplete = useCallback((userData) => {
    localStorage.setItem('onboarding_completed', 'true');
    localStorage.setItem('user_data', JSON.stringify(userData));
    setNeedsOnboarding(false);

    window.dispatchEvent(new CustomEvent('OnboardingCompleted'));
  }, []);

  const handleWriteReview = useCallback(() => {
    navigate('/write-review');
  }, [navigate]);

  // Favorites picker state (for heart button on cards)
  const [pickerOpen, setPickerOpen] = useState(false);
  const [pickerCollections, setPickerCollections] = useState([]);
  const [pickerSelectedIds, setPickerSelectedIds] = useState([]);
  const [pickerPlace, setPickerPlace] = useState(null);
  const [addOpen, setAddOpen] = useState(false);

  const openPickerForPlace = useCallback((place, liked) => {
    if (!place || !place.id) return;
    // If unliking, remove from all collections immediately and do not open picker
    if (liked === false) {
      const map = loadMapping();
      if (map[String(place.id)]) {
        delete map[String(place.id)];
        saveMapping(map);
        setPickerCollections(recountCollectionCounts());
      }
      return;
    }

    // For liking, open picker with NO preselected collections
    const cols = loadCollections();
    setPickerCollections(cols);
    setPickerSelectedIds([]);
    setPickerPlace(place);
    setPickerOpen(true);
  }, []);

  const pickerToggle = useCallback((cid) => {
    setPickerSelectedIds(prev => prev.includes(cid) ? prev.filter(v => v !== cid) : [...prev, cid]);
  }, []);

  const pickerSave = useCallback(() => {
    if (!pickerPlace) return setPickerOpen(false);
    savePlace(pickerPlace);
    const map = loadMapping();
    map[String(pickerPlace.id)] = pickerSelectedIds;
    saveMapping(map);
    setPickerCollections(recountCollectionCounts());
    setPickerOpen(false);
  }, [pickerPlace, pickerSelectedIds]);

  const handleCreateNewCollection = useCallback(() => setAddOpen(true), []);

  const handleSubmitNewCollection = useCallback(({ title, description }) => {
    if (!title?.trim()) return;
    addCollection({ title: title.trim(), description: description?.trim() });
    setPickerCollections(recountCollectionCounts());
    // Do NOT auto-add the current place to new collection; user must select and save explicitly.
    setAddOpen(false);
  }, []);

  if(needsOnboarding){
    return <OnboardingFlow onComplete={handleOnboardingComplete} />
  }

  return (
    <div className="bg-white h-full flex flex-col">
      <div className="flex-1 overflow-y-auto no-scrollbar px-4 sm:px-6 pt-4 pb-6">
        <LocationBar hasContainer={false} />

        {/* variant -> dark, light 지정 시 검색창 테마 변경 */}
        <SearchBar variant='' clickable={true} />

        {/* 스탬프 카드 */}
        <StampCard onWrite={handleWriteReview} />

        {/* 섹션 타이틀 */}
        <SectionTitle title="최애 장소 기반 추천" subtitle="00님의 최근 데이터를 바탕으로 좋아하실 곳을 뽑아봤어요!"/>

        {/* 가로 스크롤 카드 (카드 너비 150 / 높이 170) */}
        <PlaceCards 
          places={favoriteData}
          variant="default"
          layout="scroll"
          className="mt-3"
          onLikeToggle={openPickerForPlace}
        />

        {/* 오늘의 추천 */}
        <SectionTitle className='mt-6' title="오늘의 추천"/>

        {/* 날씨/온도 태그 */}
        <TagPills 
          className="mt-2"
          tags={['흐림', '비가주륵주륵', '28도']}
        />

        {/* 3열 카드 그리드 (칸 간격 12px) */}
        <PlaceCards 
          places={todayData} 
          variant="compact"
          layout="grid"
          className="mt-3"
          onLikeToggle={openPickerForPlace}
        />
      
      {/* Favorites picker and add modal */}
      <FavoritesPickerSheet
        open={pickerOpen}
        onClose={() => setPickerOpen(false)}
        collections={pickerCollections}
        selectedIds={pickerSelectedIds}
        onToggle={pickerToggle}
        onCreateNew={handleCreateNewCollection}
        onSave={pickerSave}
      />

      <AddCollectionModal
        open={addOpen}
        onClose={() => setAddOpen(false)}
        onSubmit={handleSubmitNewCollection}
      />
      </div>
    </div>
)};

export default Home;
